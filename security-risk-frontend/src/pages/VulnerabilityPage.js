import React, { useEffect, useState } from 'react';
import { getVulnerabilities, createVulnerability, updateVulnerability, deleteVulnerability } from '../services/vulnerabilityService';
import { getAssets } from '../services/assetService';
import { VULNERABILITY_OPTIONS } from '../constants/vulnerabilities';

const CATEGORY_OPTIONS = Object.keys(VULNERABILITY_OPTIONS);

const inputStyle = {
  borderRadius: 8,
  border: '1px solid #e0e0e0',
  background: '#f7fafd',
  padding: '8px 12px',
  fontSize: 15,
  outline: 'none',
  width: '100%',
  boxSizing: 'border-box'
};

export default function VulnerabilityPage() {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [assets, setAssets] = useState([]);
  const [form, setForm] = useState({
    category: CATEGORY_OPTIONS[0],
    code: '',
    description: '',
    vulnerabilityLevel: 1,
    asset: ''
  });
  const [editingId, setEditingId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState('');
  const [success, setSuccess] = useState('');

  const fetchData = async () => {
    setLoading(true);
    setErr('');
    try {
      const [vulnRes, assetRes] = await Promise.all([getVulnerabilities(), getAssets()]);
      setVulnerabilities(vulnRes.data);
      setAssets(assetRes.data);
    } catch {
      setErr('Không thể tải dữ liệu');
    }
    setLoading(false);
  };

  useEffect(() => { fetchData(); }, []);

  const handleCategoryChange = e => {
    const category = e.target.value;
    setForm(f => ({
      ...f,
      category,
      code: '',
      description: ''
    }));
  };

  const handleCodeDescChange = e => {
    const value = e.target.value;
    if (!value) {
      setForm(f => ({ ...f, code: '', description: '' }));
      return;
    }
    const [code, ...descArr] = value.split(':');
    setForm(f => ({
      ...f,
      code: code.trim(),
      description: descArr.join(':').trim()
    }));
  };

  /*const handleCustomDescChange = e => {
    setForm(f => ({
      ...f,
      code: 'OTHER',
      description: e.target.value
    }));
  }; */

  const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async e => {
    e.preventDefault();
    setLoading(true);
    setErr('');
    setSuccess('');
    try {
      const data = { ...form };
      data.vulnerabilityLevel = Number(data.vulnerabilityLevel);
      if (!data.asset) delete data.asset;
      if (editingId) {
        await updateVulnerability(editingId, data);
        setSuccess('Cập nhật lỗ hổng thành công!');
      } else {
        await createVulnerability(data);
        setSuccess('Thêm lỗ hổng thành công!');
      }
      setForm({ category: CATEGORY_OPTIONS[0], code: '', description: '', vulnerabilityLevel: 1, asset: '' });
      setEditingId(null);
      await fetchData();
    } catch {
      setErr('Lưu lỗ hổng thất bại');
    }
    setLoading(false);
  };

  const handleEdit = vuln => {
    setForm({
      category: vuln.category,
      code: vuln.code,
      description: vuln.description,
      vulnerabilityLevel: vuln.vulnerabilityLevel,
      asset: vuln.asset?._id || vuln.asset || ''
    });
    setEditingId(vuln._id);
  };

  const handleDelete = async id => {
    if (!window.confirm('Bạn chắc chắn muốn xóa lỗ hổng này?')) return;
    setLoading(true);
    setErr('');
    setSuccess('');
    try {
      await deleteVulnerability(id);
      setSuccess('Xóa lỗ hổng thành công!');
      await fetchData();
    } catch {
      setErr('Xóa thất bại');
    }
    setLoading(false);
  };

  const isOther = form.category === 'Khác';

  return (
    <div
      style={{
        width: '100%',
        minHeight: '100vh',
        background: '#f7fafd',
        padding: 0,
        margin: 0
      }}
    >
      <div
        style={{
          width: '100%',
          padding: '40px 0 0 0',
          boxSizing: 'border-box'
        }}
      >
        <h2 style={{
          color: '#19c6e6',
          fontWeight: 700,
          fontSize: 32,
          marginBottom: 32,
          letterSpacing: 0.5,
          marginLeft: 32
        }}>
          Quản lý lỗ hổng
        </h2>
        {loading && <div style={{ color: '#19c6e6', marginBottom: 12 }}>Đang tải dữ liệu...</div>}
        {err && <div style={{ color: 'red', marginBottom: 8 }}>{err}</div>}
        {success && <div style={{ color: 'green', marginBottom: 8 }}>{success}</div>}

        {/* FORM */}
        <form
          onSubmit={handleSubmit}
          style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(220px, 1fr))',
            gap: 24,
            margin: '0 32px 24px 32px',
            alignItems: 'end',
            background: '#fff',
            borderRadius: 8,
            padding: 24,
            boxShadow: '0 2px 8px #0001'
          }}
        >
          <div>
            <label style={{ fontWeight: 500 }}>Loại lỗ hổng</label>
            <select name="category" value={form.category} onChange={handleCategoryChange} style={inputStyle}>
              {CATEGORY_OPTIONS.map(opt => <option key={opt} value={opt}>{opt}</option>)}
            </select>
          </div>
          <div>
            <label style={{ fontWeight: 500 }}>Mã & mô tả lỗ hổng</label>
            {isOther ? (
              <>
                <input
                  value={form.code}
                  onChange={e => setForm(f => ({ ...f, code: e.target.value }))}
                  placeholder="Nhập mã lỗ hổng (VD: TD06)"
                  style={inputStyle}
                  required
                />
                <input
                  value={form.description}
                  onChange={e => setForm(f => ({ ...f, description: e.target.value }))}
                  placeholder="Nhập mô tả lỗ hổng"
                  style={inputStyle}
                  required
                />
              </>
            ) : (
              <select value={form.code ? `${form.code}: ${form.description}` : ''} onChange={handleCodeDescChange} style={inputStyle}>
                <option value="">--Chọn lỗ hổng--</option>
                {VULNERABILITY_OPTIONS[form.category].map(item => (
                  <option key={item.code} value={`${item.code}: ${item.description}`}>
                    {item.code}: {item.description}
                  </option>
                ))}
              </select>
            )}
          </div>
          <div>
            <label style={{ fontWeight: 500 }}>Tài sản liên quan</label>
            <select name="asset" value={form.asset} onChange={handleChange} style={inputStyle}>
              <option value="">--Tài sản liên quan--</option>
              {assets.map(a => <option key={a._id} value={a._id}>{a.name}</option>)}
            </select>
          </div>
          <div>
            <label style={{ fontWeight: 500 }}>Mức độ lỗ hổng<br /><span style={{ fontWeight: 400, fontSize: 12, color: '#666' }}>(1: Nhẹ nhất, 5: Nặng nhất)</span></label>
            <input
              name="vulnerabilityLevel"
              type="number"
              min={1}
              max={5}
              value={form.vulnerabilityLevel}
              onChange={handleChange}
              placeholder="1-5"
              style={inputStyle}
            />
          </div>
          <div style={{ display: 'flex', gap: 8, alignItems: 'flex-end', marginTop: 22 }}>
            <button type="submit" style={{ background: '#33FFCC', color: '#fff', padding: '6px 16px', borderRadius: 8, flex: 1 }}>{editingId ? 'Cập nhật' : 'Thêm'}</button>
            {editingId && <button type="button" onClick={() => { setEditingId(null); setForm({ category: CATEGORY_OPTIONS[0], code: '', description: '', vulnerabilityLevel: 1, asset: '' }); }} style={{ background: '#AAAAAA', color: '#fff', padding: '6px 16px', borderRadius: 8 }}>Hủy</button>}
            <button type="button" onClick={fetchData} style={{ background: '#19c6e6', color: '#fff', padding: '6px 16px', borderRadius: 8 }}>Làm mới danh sách</button>
          </div>
        </form>

        {/* BẢNG */}
        <div style={{
          margin: '0 32px 32px 32px',
          background: '#fff',
          borderRadius: 8,
          boxShadow: '0 2px 8px #0001',
          padding: 0,
          overflowX: 'auto'
        }}>
          <table className="table-main" style={{ minWidth: 900, width: '100%' }}>
            <thead>
              <tr>
                <th>Loại</th>
                <th>Mã</th>
                <th>Mô tả</th>
                <th>Tài sản</th>
                <th>Mức độ</th>
                <th>Thao tác</th>
              </tr>
            </thead>
            <tbody>
              {vulnerabilities.map(vuln => (
                <tr key={vuln._id}>
                  <td>{vuln.category}</td>
                  <td>{vuln.code}</td>
                  <td>{vuln.description}</td>
                  <td>{assets.find(a => a._id === (vuln.asset?._id || vuln.asset))?.name || ''}</td>
                  <td>{vuln.vulnerabilityLevel}</td>
                  <td style={{ textAlign: 'center', whiteSpace: 'nowrap' }}>
                    <button onClick={() => handleEdit(vuln)} style={{ background: '#19c6e6', color: '#fff', padding: '6px 16px', borderRadius: 8, marginRight: 6, minWidth: 56 }}>Sửa</button>
                    <button onClick={() => handleDelete(vuln._id)} style={{ background: '#ff4d4f', color: '#fff', padding: '6px 16px', borderRadius: 8, minWidth: 56 }}>Xóa</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}