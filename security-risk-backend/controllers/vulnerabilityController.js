const vulnerabilityService = require('../services/vulnerabilityService');
const mongoose = require('mongoose');
const { isValidVulnerability } = require('../utils/vulnerabilityOptions');
const XLSX = require('xlsx');
const fs = require('fs');
const Vulnerability = require('../models/Vulnerability');
const Asset = require('../models/Asset');

const getVulnerabilities = async (req, res) => {
  try {
    let filter = {};
    if (req.user.role !== 'admin') {
      filter.createdBy = new mongoose.Types.ObjectId(req.user.userId);
    }
    const vulnerabilities = await vulnerabilityService.getAllVulnerabilities(filter);
    res.json(vulnerabilities);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

const getVulnerabilityById = async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: 'ID không hợp lệ' });
  }
  try {
    const vulnerability = await vulnerabilityService.getVulnerabilityById(req.params.id);
    if (!vulnerability) return res.status(404).json({ message: 'Không tìm thấy lỗ hổng' });
    if (req.user.role !== 'admin' && vulnerability.createdBy.toString() !== req.user.userId) {
      return res.status(403).json({ message: 'Bạn không có quyền xem lỗ hổng này' });
    }
    res.json(vulnerability);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

const createVulnerability = async (req, res) => {
  try {
    const { category, code, description, asset } = req.body;
    if (!isValidVulnerability(category, code, description)) {
      return res.status(400).json({ message: 'Mã hoặc mô tả lỗ hổng không hợp lệ với loại đã chọn' });
    }
    if (asset && !mongoose.Types.ObjectId.isValid(asset)) {
      return res.status(400).json({ message: 'Asset không hợp lệ' });
    }
    const vulnerability = await vulnerabilityService.createVulnerability(
      {
        ...req.body,
        createdBy: req.user.userId
      });
    res.status(201).json(vulnerability);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

const updateVulnerability = async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: 'ID không hợp lệ' });
  }
  try {
    const { category, code, description } = req.body;
    if (!isValidVulnerability(category, code, description)) {
      return res.status(400).json({ message: 'Mã hoặc mô tả lỗ hổng không hợp lệ với loại đã chọn' });
    }
    const vulnerability = await vulnerabilityService.updateVulnerability(req.params.id, req.body);
    if (!vulnerability) return res.status(404).json({ message: 'Không tìm thấy lỗ hổng' });
    if (req.user.role !== 'admin' && vulnerability.createdBy.toString() !== req.user.userId) {
      return res.status(403).json({ message: 'Bạn không có quyền sửa lỗ hổng này' });
    }
    const updated = await vulnerabilityService.updateVulnerability(req.params.id, req.body);
    res.json(updated);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

const deleteVulnerability = async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: 'ID không hợp lệ' });
  }
  try {
    const vulnerability = await vulnerabilityService.deleteVulnerability(req.params.id);
    if (!vulnerability) return res.status(404).json({ message: 'Không tìm thấy lỗ hổng' });
    if (req.user.role !== 'admin' && vulnerability.createdBy.toString() !== req.user.userId) {
      return res.status(403).json({ message: 'Bạn không có quyền xóa lỗ hổng này' });
    }
    await vulnerabilityService.deleteVulnerability(req.params.id);
    res.json({ message: 'Đã xóa Lỗ hổng thành công' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// EXPORT
const exportExcel = async (req, res) => {
  try {
    let filter = {}; // <-- THÊM DÒNG NÀY
    if (req.user.role !== 'admin') {
      if (!req.user.userId || !mongoose.Types.ObjectId.isValid(req.user.userId)) {
        return res.status(400).json({ message: 'ID không hợp lệ' });
      }
      filter.createdBy = new mongoose.Types.ObjectId(req.user.userId);
    }
    const data = await Vulnerability.find(filter).populate('asset').lean();
    const rows = data.map(v => ({
      "Loại": v.category,
      "Mã": v.code,
      "Mô tả": v.description,
      "Mức độ": v.vulnerabilityLevel,
      "Tài sản": v.asset?.name || '',
    }));
    const ws = XLSX.utils.json_to_sheet(rows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Vulnerabilities');
    const buf = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });
    res.setHeader('Content-Disposition', 'attachment; filename="lo_hong.xlsx"');
    res.type('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.send(buf);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// IMPORT
const importExcel = async (req, res) => {
  try {
    const filePath = req.file.path;
    const workbook = XLSX.readFile(filePath);
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(sheet);

    for (const row of rows) {
      let asset = null;
      if (row["Tài sản"]) {
        asset = await Asset.findOne({ name: row["Tài sản"] });
      }
      await Vulnerability.create({
        category: row["Loại"],
        code: row["Mã"],
        description: row["Mô tả"],
        vulnerabilityLevel: Number(row["Mức độ"]),
        asset: asset?._id,
        createdBy: req.user.userId // hoặc truyền userId nếu có xác thực
      });
    }
    fs.unlinkSync(filePath); // Xóa file sau khi xử lý
    res.json({ message: 'Import thành công!' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

module.exports = {
  getVulnerabilities,
  getVulnerabilityById,
  createVulnerability,
  updateVulnerability,
  deleteVulnerability,
  exportExcel,
  importExcel
};