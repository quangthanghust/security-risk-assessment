const vulnerabilityService = require('../services/vulnerabilityService');
const mongoose = require('mongoose');
const { isValidVulnerability } = require('../utils/vulnerabilityOptions');

const getVulnerabilities = async (req, res) => {
  try {
    let filter = {};
    if (req.user.role !== 'admin') {
      filter.createdBy = new mongoose.Types.ObjectId(req.user.userId);
    }
    const vulnerabilities = await vulnerabilityService.getAllVulnerabilities(filter);
    res.json(vulnerabilities);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

const getVulnerabilityById = async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: 'ID không hợp lệ' });
  }
  try {
    const vulnerability = await vulnerabilityService.getVulnerabilityById(req.params.id);
    if (!vulnerability) return res.status(404).json({ message: 'Không tìm thấy lỗ hổng' });
    if (req.user.role !== 'admin' && vulnerability.createdBy.toString() !== req.user.userId) {
      return res.status(403).json({ message: 'Bạn không có quyền xem lỗ hổng này' });
    }
    res.json(vulnerability);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

const createVulnerability = async (req, res) => {
  try {
    const { category, code, description, asset } = req.body;
    if (!isValidVulnerability(category, code, description)) {
      return res.status(400).json({ message: 'Mã hoặc mô tả lỗ hổng không hợp lệ với loại đã chọn' });
    }
    if (asset && !mongoose.Types.ObjectId.isValid(asset)) {
      return res.status(400).json({ message: 'Asset không hợp lệ' });
    }
    const vulnerability = await vulnerabilityService.createVulnerability(
      {
        ...req.body,
        createdBy: req.user.userId
      });
    res.status(201).json(vulnerability);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

const updateVulnerability = async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: 'ID không hợp lệ' });
  }
  try {
    const { category, code, description } = req.body;
    if (!isValidVulnerability(category, code, description)) {
      return res.status(400).json({ message: 'Mã hoặc mô tả lỗ hổng không hợp lệ với loại đã chọn' });
    }
    const vulnerability = await vulnerabilityService.updateVulnerability(req.params.id, req.body);
    if (!vulnerability) return res.status(404).json({ message: 'Không tìm thấy lỗ hổng' });
    if (req.user.role !== 'admin' && vulnerability.createdBy.toString() !== req.user.userId) {
      return res.status(403).json({ message: 'Bạn không có quyền sửa lỗ hổng này' });
    }
    const updated = await vulnerabilityService.updateVulnerability(req.params.id, req.body);
    res.json(updated);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

const deleteVulnerability = async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: 'ID không hợp lệ' });
  }
  try {
    const vulnerability = await vulnerabilityService.deleteVulnerability(req.params.id);
    if (!vulnerability) return res.status(404).json({ message: 'Không tìm thấy lỗ hổng' });
    if (req.user.role !== 'admin' && vulnerability.createdBy.toString() !== req.user.userId) {
      return res.status(403).json({ message: 'Bạn không có quyền xóa lỗ hổng này' });
    }
    await vulnerabilityService.deleteVulnerability(req.params.id);
    res.json({ message: 'Đã xóa Lỗ hổng thành công' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

module.exports = {
  getVulnerabilities,
  getVulnerabilityById,
  createVulnerability,
  updateVulnerability,
  deleteVulnerability,
};